<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ademiando - Desainer & Pengembang Web Interaktif</title>

    <!-- Tailwind CSS untuk UI overlay -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700;900&display=swap" rel="stylesheet">

    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0d121c; /* Dark blue-gray background for atmosphere */
            color: #fafafa;
            margin: 0;
            overflow-x: hidden;
            overscroll-behavior: contain;
        }

        #webgl-canvas {
            position: fixed;
            top: 0;
            left: 0;
            outline: none;
            z-index: -1;
        }

        .content-container {
            position: relative;
            z-index: 1;
            width: 100%;
            height: 500vh; /* Height to control scroll length */
        }

        .content-section {
            height: 100vh;
            width: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 0 2rem;
            position: sticky;
            top: 0;
            opacity: 0;
            transition: opacity 0.5s ease-in-out;
            text-shadow: 0 0 10px rgba(0,0,0,0.7); /* Add shadow for readability */
        }
        
        .content-section.visible {
            opacity: 1;
        }
    </style>
</head>
<body>

    <canvas id="webgl-canvas"></canvas>

    <div class="content-container">
        <section id="section-0" class="content-section">
            <h1 class="text-5xl md:text-8xl font-black uppercase tracking-tighter">Ademiando</h1>
            <p class="mt-4 text-lg md:text-2xl text-gray-300 max-w-2xl">
                Menciptakan Pengalaman Digital Imersif dengan Teknologi Web Modern.
            </p>
        </section>

        <section id="section-1" class="content-section">
            <h2 class="text-4xl md:text-6xl font-bold">Desain UI/UX</h2>
            <p class="mt-2 text-xl text-gray-400 max-w-2xl">Fokus pada pengalaman pengguna yang intuitif dan antarmuka yang menawan.</p>
        </section>

        <section id="section-2" class="content-section">
            <h2 class="text-4xl md:text-6xl font-bold">Pengembangan WebGL</h2>
            <p class="mt-2 text-xl text-gray-400 max-w-2xl">Membangun visualisasi 3D interaktif yang berjalan mulus di peramban.</p>
        </section>

        <section id="section-3" class="content-section">
            <h2 class="text-4xl md:text-6xl font-bold">Animasi Interaktif</h2>
            <p class="mt-2 text-xl text-gray-400 max-w-2xl">Menghidupkan situs dengan animasi yang responsif dan bermakna.</p>
        </section>
        
        <section id="section-4" class="content-section">
              <h2 class="text-4xl md:text-6xl font-bold">Mari Terhubung</h2>
              <p class="mt-4 max-w-xl text-lg text-gray-300">
                  Punya ide atau proyek yang ingin didiskusikan? Saya selalu terbuka untuk kesempatan baru.
              </p>
              <a href="mailto:halo@ademiando.com" class="mt-8 inline-block bg-white text-black font-semibold px-8 py-3 rounded-lg hover:bg-gray-200 transition-all duration-300">
                Kirim Email
              </a>
        </section>
    </div>

    <!-- Libraries -->
    <script async src="https://unpkg.com/es-module-shims@1.6.3/dist/es-module-shims.js"></script>
    <script type="importmap">
        {
            "imports": {
                "three": "https://cdn.jsdelivr.net/npm/three@0.157.0/build/three.module.js",
                "three/addons/": "https://cdn.jsdelivr.net/npm/three@0.157.0/examples/jsm/"
            }
        }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>

    <script type="module">
        import * as THREE from 'three';
        import { SimplexNoise } from 'three/addons/math/SimplexNoise.js';

        // --- Scene Setup ---
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({
            canvas: document.querySelector('#webgl-canvas'),
            antialias: true
        });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);

        // Add fog for a misty, cinematic effect
        scene.fog = new THREE.Fog(0x0d121c, 1, 20);

        // --- Procedural Terrain Generation ---
        const terrainSize = 200;
        const terrainSegments = 256;
        const terrainGeometry = new THREE.PlaneGeometry(terrainSize, terrainSize, terrainSegments, terrainSegments);
        terrainGeometry.rotateX(-Math.PI / 2); // Rotate the plane to be horizontal

        const noise = new SimplexNoise(); // Create an instance of the imported class
        const terrainHeight = 20;
        const vertexCount = terrainGeometry.attributes.position.count;

        for (let i = 0; i < vertexCount; i++) {
            const vertex = new THREE.Vector3().fromBufferAttribute(terrainGeometry.attributes.position, i);
            // Fix: The correct function name for SimplexNoise is 'noise', not 'noise2D'.
            const noiseValue = noise.noise(vertex.x / 50, vertex.z / 50) * terrainHeight;
            terrainGeometry.attributes.position.setY(i, noiseValue);
        }

        // Generate vertex colors based on height for a natural look
        const colors = [];
        const color = new THREE.Color();
        const grassColor = new THREE.Color(0x228B22); // Forest green
        const mountainColor = new THREE.Color(0x696969); // Dim gray
        const snowColor = new THREE.Color(0xfafafa); // White

        for (let i = 0; i < vertexCount; i++) {
            const height = terrainGeometry.attributes.position.getY(i);
            const heightNormalized = (height + terrainHeight) / (terrainHeight * 2);

            if (heightNormalized < 0.3) {
                color.copy(grassColor);
            } else if (heightNormalized < 0.7) {
                color.copy(mountainColor).lerp(grassColor, (heightNormalized - 0.3) / 0.4);
            } else {
                color.copy(snowColor);
            }
            colors.push(color.r, color.g, color.b);
        }
        terrainGeometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));

        const terrainMaterial = new THREE.MeshLambertMaterial({
            vertexColors: true,
            flatShading: true
        });
        
        const terrainMesh = new THREE.Mesh(terrainGeometry, terrainMaterial);
        scene.add(terrainMesh);

        // --- Lighting ---
        const ambientLight = new THREE.AmbientLight(0x404040, 1); // Soft ambient light
        scene.add(ambientLight);
        
        const directionalLight = new THREE.DirectionalLight(0xffffff, 2.5);
        directionalLight.position.set(50, 100, 50); // Light source from the sun
        scene.add(directionalLight);
        
        // --- Water/River ---
        const waterGeometry = new THREE.PlaneGeometry(terrainSize, terrainSize);
        waterGeometry.rotateX(-Math.PI / 2);
        const waterMaterial = new THREE.MeshStandardMaterial({
            color: 0x224488,
            metalness: 0.8,
            roughness: 0.1,
            transparent: true,
            opacity: 0.7
        });
        const waterMesh = new THREE.Mesh(waterGeometry, waterMaterial);
        waterMesh.position.y = -terrainHeight * 0.7; // Place water at a low elevation
        scene.add(waterMesh);
        
        // --- GSAP Scroll Animation ---
        gsap.registerPlugin(ScrollTrigger);

        // Define a variable for the initial camera position
        const initialCameraPos = {
            x: 0,
            y: terrainHeight * 0.5,
            z: terrainSize * 0.4
        };
        camera.position.set(initialCameraPos.x, initialCameraPos.y, initialCameraPos.z);
        
        // Use a timeline for cinematic camera movement
        const tl = gsap.timeline({
            scrollTrigger: {
                trigger: ".content-container",
                start: "top top",
                end: "bottom bottom",
                scrub: true,
            }
        });

        // Animate camera position to fly over the mountains
        tl.to(camera.position, {
            x: -20,
            y: terrainHeight * 0.6,
            z: 0
        }, 0)
        .to(camera.lookAt(new THREE.Vector3(0, 0, 0)), {}, 0)
        .to(camera.position, {
            x: 20,
            y: terrainHeight * 0.8,
            z: -20
        }, 1)
        .to(camera.lookAt(new THREE.Vector3(0, terrainHeight * 0.5, 0)), {}, 1)
        .to(camera.position, {
            x: 0,
            y: terrainHeight * 0.7,
            z: -100
        }, 2)
        .to(camera.lookAt(new THREE.Vector3(0, terrainHeight * 0.2, -150)), {}, 2);

        // --- HTML Content Fade In/Out ---
        const sections = document.querySelectorAll('.content-section');
        sections.forEach((section) => {
            ScrollTrigger.create({
                trigger: section,
                start: 'top center',
                end: 'bottom center',
                onEnter: () => section.classList.add('visible'),
                onLeave: () => section.classList.remove('visible'),
                onEnterBack: () => section.classList.add('visible'),
                onLeaveBack: () => section.classList.remove('visible'),
            });
        });
        
        // --- Animation Loop ---
        function animate() {
            requestAnimationFrame(animate);
            // Rotate the terrain slowly to simulate wind/movement
            terrainMesh.rotation.y += 0.0002;
            renderer.render(scene, camera);
        }
        
        // --- Handle Window Resize ---
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });

        window.onload = animate;
    </script>
</body>
</html>
